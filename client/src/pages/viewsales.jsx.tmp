import React, { useState, useEffect, useContext } from "react";
import { useNavigate } from "react-router-dom";
import "../styles/ViewSales.css";
import axios from "axios";
import { UserContext } from "../usercontext/UserContext";
import { toast } from "react-toastify";
import { motion } from "framer-motion";

const ViewSales = () => {
  const navigate = useNavigate();
  const { user, token } = useContext(UserContext);
  const [sales, setSales] = useState([]);
  const [isOwner, setIsOwner] = useState(false);
  const [loading, setLoading] = useState(true);
  const [showMySales, setShowMySales] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [employees, setEmployees] = useState([]);

  useEffect(() => {
    if (!token) {
      navigate("/login");
      return;
    }
    fetchSales();
    fetchOrganizationInfo();
  }, [token, navigate]);

  const fetchOrganizationInfo = async () => {
    try {
      const authToken = JSON.parse(localStorage.getItem("auth"));
      const response = await axios.get(
        "http://localhost:3000/api/v1/organization",
        {
          headers: { Authorization: `Bearer ${authToken}` },
        }
      );

      if (response.data.success) {
        setIsOwner(response.data.isOwner);
        if (response.data.isOwner) {
          setEmployees(response.data.organization.members || []);
        }
      }
    } catch (error) {
      console.error("Error fetching organization info:", error);
      toast.error("Failed to load organization information");
    }
  };

  const fetchSales = async () => {
    try {
      setLoading(true);
      const authToken = JSON.parse(localStorage.getItem("auth"));
      const response = await axios.get(
        "http://localhost:3000/api/v1/sales",
        {
          headers: { Authorization: `Bearer ${authToken}` },
        }
      );

      if (response.data.success) {
        setSales(response.data.sales);
      }
    } catch (error) {
      console.error("Error fetching sales:", error);
      toast.error("Failed to load sales data");
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteSale = async (saleId) => {
    if (!isOwner) return;
    
    if (window.confirm("Are you sure you want to delete this sale?")) {
      try {
        const authToken = JSON.parse(localStorage.getItem("auth"));
        const response = await axios.delete(
          `http://localhost:3000/api/v1/sales/${saleId}`,
          {
            headers: { Authorization: `Bearer ${authToken}` },
          }
        );

        if (response.data.success) {
          toast.success("Sale deleted successfully");
          fetchSales();
        }
      } catch (error) {
        console.error("Error deleting sale:", error);
        toast.error("Failed to delete sale");
      }
    }
  };

  const getDisplaySales = () => {
    let filteredSales = sales;
    if (isOwner && selectedEmployee) {
      filteredSales = sales.filter(sale => sale.userId === selectedEmployee);
    } else if (!isOwner && showMySales) {
      filteredSales = sales.filter(sale => sale.userId === user.id);
    }
    return groupSalesByDate(filteredSales);
  };

  const groupSalesByDate = (sales) => {
    const grouped = {};
    sales.forEach((sale) => {
      if (!sale.timeslot) return;
      const dateKey = new Date(sale.timeslot.date).toDateString();
      if (!grouped[dateKey]) {
        grouped[dateKey] = [];
      }
      grouped[dateKey].push(sale);
    });
    return grouped;
  };

  const getWeekDates = () => {
    const dates = [];
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    for (let i = -3; i <= 3; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      dates.push(date);
    }
    return dates;
  };

  const formatTimeslot = (timeslot) => {
    if (!timeslot) return "No timeslot information";
    const date = new Date(timeslot.date);
    const formattedDate = date.toLocaleDateString("en-US", {
      month: "long",
      day: "numeric",
      year: "numeric"
    });
    return `${formattedDate}, ${timeslot.startTime} - ${timeslot.endTime}`;
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString();
  };

  if (loading) {
    return (
      <div className="view-sales-container">
        <div className="loading-spinner"></div>
      </div>
    );
  }

  return (
    <div className="view-sales-container">
      <motion.div 
        className="sales-header"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <h1>Sales Overview</h1>
        <div className="filter-controls">
          {isOwner ? (
            <select 
              value={selectedEmployee || ""}
              onChange={(e) => setSelectedEmployee(e.target.value || null)}
              className="employee-select"
            >
              <option value="">All Sales</option>
              {employees.map(emp => (
                <option key={emp.user} value={emp.user}>
                  {emp.name}
                </option>
              ))}
            </select>
          ) : (
            <button
              className="toggle-btn"
              onClick={() => setShowMySales(!showMySales)}
            >
              {showMySales ? "Show All Sales" : "Show My Sales"}
            </button>
          )}
        </div>
      </motion.div>

      <motion.div 
        className="sales-content"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <div className="sales-grid">
          {getWeekDates().map((date) => (
            <div key={date.toDateString()} className="day-column">
              <div className="day-header">
                <h3>{date.toLocaleDateString('en-US', { 
                  weekday: 'long',
                  month: 'short',
                  day: 'numeric'
                })}</h3>
              </div>
              <div className="day-sales">
                {getDisplaySales()[date.toDateString()]?.map((sale) => (
                  <motion.div
                    key={sale._id}
                    className="sale-card"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3 }}
                  >
                    <div className="sale-header">
                      <h3>{sale.salesRepName}</h3>
                      {isOwner && (
                        <button
                          className="delete-btn"
                          onClick={() => handleDeleteSale(sale._id)}
                        >
                          ×
                        </button>
                      )}
                    </div>
                    <div className="sale-time">
                      {sale.timeslot.startTime} - {sale.timeslot.endTime}
                    </div>
                    <div className="sale-info">
                      <p><strong>Client:</strong> {sale.name}</p>
                      <p><strong>Price:</strong> ${sale.price}</p>
                      <p><strong>Phone:</strong> {sale.number}</p>
                      <p><strong>Address:</strong> {sale.address}</p>
                      <p><strong>Details:</strong> {sale.details}</p>
                    </div>
                  </motion.div>
                )) || (
                  <div className="no-sales">
                    No sales recorded
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>

        <button className="back-btn" onClick={() => navigate("/turtle-portal")}>
          ← Back to Portal
        </button>
      </motion.div>
    </div>
  );
};

export default ViewSales;
